<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js里数组常用的方法</title>
      <link href="/2020/07/27/javascript/"/>
      <url>/2020/07/27/javascript/</url>
      
        <content type="html"><![CDATA[<h1 id="js-里数组常用的方法"><a href="#js-里数组常用的方法" class="headerlink" title="js 里数组常用的方法"></a>js 里数组常用的方法</h1><h3 id="concat方法"><a href="#concat方法" class="headerlink" title="concat方法"></a>concat方法</h3><blockquote><p><strong>concat方法不会改变原数组，会返回一个拼接后的新数组。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">var arr1<span class="token operator">=</span> <span class="token punctuation">[</span>1,2,3<span class="token punctuation">]</span><span class="token punctuation">;</span>var arr2<span class="token operator">=</span><span class="token punctuation">[</span>3,4<span class="token punctuation">]</span><span class="token punctuation">;</span>arr1.concat<span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>arr1.length<span class="token punctuation">)</span><span class="token punctuation">;</span>  //3console.log<span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>   // <span class="token punctuation">[</span>1,2,3<span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>   // <span class="token punctuation">[</span>3,4<span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>arr1.concat<span class="token punctuation">(</span>arr2<span class="token punctuation">))</span><span class="token punctuation">;</span>   // <span class="token punctuation">[</span>1,2,3,3,4<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="join-方法"><a href="#join-方法" class="headerlink" title="join 方法"></a>join 方法</h3><blockquote><p><strong>join方法不会改变原数组，join()方法将一个数组（或一个类数组对象）的所有元素根据传入的参数连接成一个字符串，并返回这个字符串。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">var arr <span class="token operator">=</span> <span class="token punctuation">[</span>1,2,3,4,5<span class="token punctuation">]</span><span class="token punctuation">;</span>arr.join<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>     // <span class="token punctuation">[</span>1,2,3,4,5<span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>arr.join<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">))</span><span class="token punctuation">;</span>    // <span class="token string">'1,2,3,4,5'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="push方法和pop方法"><a href="#push方法和pop方法" class="headerlink" title="push方法和pop方法"></a>push方法和pop方法</h3><blockquote><p><strong>push方法和pop方法会改变原数组，push方法用于向数组最末尾的位置添加新元素，pop方法用于删除数组最末尾的那个元素。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">var arr <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2, 3, 4, 5<span class="token punctuation">]</span><span class="token punctuation">;</span>arr.push<span class="token punctuation">(</span>6,7<span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   // <span class="token punctuation">[</span>1,2,3,4,5,6,7<span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>arr.push<span class="token punctuation">(</span>6,7<span class="token punctuation">))</span><span class="token punctuation">;</span>   //9arr.pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   //<span class="token punctuation">[</span>1,2,3,4,5,6,7,6<span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>arr.pop<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>   //6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unshift方法和shift方法"><a href="#unshift方法和shift方法" class="headerlink" title="unshift方法和shift方法"></a>unshift方法和shift方法</h3><blockquote><p><strong>unshift方法和shift方法会改变原数组，unshift方法用于在数组第一个元素(下标为0)的前面的位置添加新元素，shift方法用于删除数组第一个元素(下标为0)的位置的元素。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">var arr <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2, 3, 4, 5<span class="token punctuation">]</span><span class="token punctuation">;</span>arr.shift<span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   // <span class="token punctuation">[</span>2,3,4,5<span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>arr.length<span class="token punctuation">)</span><span class="token punctuation">;</span>   // 4arr.unshift<span class="token punctuation">(</span>6<span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   // <span class="token punctuation">[</span>6,2,3,4,5<span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>arr.length<span class="token punctuation">)</span><span class="token punctuation">;</span>   // 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sort方法"><a href="#sort方法" class="headerlink" title="sort方法"></a>sort方法</h3><blockquote><p><strong>sort方法会改变数组，用于对数组元素进行排序。默认采用正排序，即小的数排在前面。sort( )可以接受一个比较函数作为参数，以便我们指定哪个值在哪个值前面。比较函数接受两个参数，如果第一个参数位于第二个参数之前就返回负数，两参数相等返回0，如果第一个参数位于第二个参数之后就返回正数，这个比较函数适用于大多数数据类型，只要将其作为参数传给sort( )即可。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">var arr<span class="token operator">=</span><span class="token punctuation">[</span>0,1,5,10,15<span class="token punctuation">]</span><span class="token punctuation">;</span>arr.sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  // <span class="token punctuation">[</span>0,1,10,15,5<span class="token punctuation">]</span>//sort接受一个比较函数作为参数var arr <span class="token operator">=</span> <span class="token punctuation">[</span>21,1,3,45,2<span class="token punctuation">]</span><span class="token punctuation">;</span>arr.sort<span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   // <span class="token punctuation">[</span>1,2,21,3,45<span class="token punctuation">]</span>arr.sort<span class="token punctuation">(</span>function<span class="token punctuation">(</span>a,b<span class="token punctuation">)</span><span class="token punctuation">{</span>    if<span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> -1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>else if<span class="token punctuation">(</span>a <span class="token operator">></span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> 1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>else<span class="token punctuation">{</span>       <span class="token keyword">return</span> 0<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   // <span class="token punctuation">[</span>1,2,3,21,45<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="reverse-方法"><a href="#reverse-方法" class="headerlink" title="reverse 方法"></a>reverse 方法</h3><blockquote><p><strong>reverse方法会改变数组，对数组元素倒置。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">var arr<span class="token operator">=</span><span class="token punctuation">[</span>21,1,3,45,2<span class="token punctuation">]</span><span class="token punctuation">;</span>arr.reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   //<span class="token punctuation">[</span>2,45,3,1,21<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="slice-方法"><a href="#slice-方法" class="headerlink" title="slice 方法"></a>slice 方法</h3><blockquote><p><strong>slice方法不会改变原数组，会返回一个截取后的新数组。一般它有两个参数，slice(A,B)表示从数组的下标为A的地方开始截取，截取到下标为B的元素处为止，截取的元素包含A下标对应的元素但不包含B下标对应的元素。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">var arr <span class="token operator">=</span> <span class="token punctuation">[</span>1,2,3,4,5,6<span class="token punctuation">]</span><span class="token punctuation">;</span>arr.slice<span class="token punctuation">(</span>1,4<span class="token punctuation">)</span><span class="token punctuation">;</span>  //从数组arr的下标1开始截取到下标4为止，截取的元素包含下标1对应的元素不包含下标4对应的元素console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   // <span class="token punctuation">[</span>1, 2, 3, 4, 5, 6<span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>arr.length<span class="token punctuation">)</span><span class="token punctuation">;</span>   // 6console.log<span class="token punctuation">(</span>arr.slice<span class="token punctuation">(</span>1,4<span class="token punctuation">))</span><span class="token punctuation">;</span>   // <span class="token punctuation">[</span>2, 3, 4<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="splice-方法"><a href="#splice-方法" class="headerlink" title="splice 方法"></a>splice 方法</h3><blockquote><p><strong>splice方法可用于删除元素、插入元素、替换元素，它会改变数组。splice方法用于删除时，只需要传入两个参数。比如splice(A,B)表示参数 A是删除第一项的位置，参数B是删除几项，并以数组形式返回被删除的部分。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">var arr <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2, 3, 4, 5<span class="token punctuation">]</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>arr.splice<span class="token punctuation">(</span>1,3<span class="token punctuation">))</span><span class="token punctuation">;</span>  //1表示要删除的第一项是下标为1,删除截止下标为3的位置,返回被删除的部分<span class="token punctuation">[</span>2, 3, 4<span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  // <span class="token punctuation">[</span>1, 5<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>splice方法用于插入元素时，只需要传入这三个参数:起始位置，0(要删除的项数)，要插入的项，插入时返回空数组。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">var arr1 <span class="token operator">=</span> <span class="token punctuation">[</span>1,2,3,4,5<span class="token punctuation">]</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>arr1.splice<span class="token punctuation">(</span>1,0,7,8<span class="token punctuation">))</span><span class="token punctuation">;</span>   // <span class="token punctuation">[</span><span class="token punctuation">]</span> 插入时返回空数组console.log<span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>   // <span class="token punctuation">[</span>1, 7, 8, 2, 3, 4, 5<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>splice方法用于替换元素时，只需要传入这三个参数:起始位置，要替换的项数，要替换的项，返回被替换掉的数。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">var arr2 <span class="token operator">=</span> <span class="token punctuation">[</span>1,2,3,4,5<span class="token punctuation">]</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>arr2.splice<span class="token punctuation">(</span>1,1,7,8<span class="token punctuation">))</span><span class="token punctuation">;</span>   // <span class="token punctuation">[</span>2<span class="token punctuation">]</span> 返回被替换掉的数console.log<span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>   // <span class="token punctuation">[</span>1, 7, 8, 3, 4, 5<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="findIndex-方法"><a href="#findIndex-方法" class="headerlink" title="findIndex 方法"></a>findIndex 方法</h3><blockquote><p><strong>findIndex方法返回满足条件的元素对应的索引下标值。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">var arr <span class="token operator">=</span> <span class="token punctuation">[</span>10,3,4,5<span class="token punctuation">]</span><span class="token punctuation">;</span>var a <span class="token operator">=</span> arr.findIndex<span class="token punctuation">(</span>function<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> item <span class="token operator">==</span> 3<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console.log<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  //1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="find-方法"><a href="#find-方法" class="headerlink" title="find 方法"></a>find 方法</h3><blockquote><p><strong>find方法不会改变原数组，返回数组中满足提供的测试函数的第一个元素的值。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">function</span> big<span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> element <span class="token operator">>=</span> 2<span class="token punctuation">;</span><span class="token punctuation">}</span>var arr <span class="token operator">=</span> <span class="token punctuation">[</span>1,2,3,2,5<span class="token punctuation">]</span><span class="token punctuation">;</span>var arr1 <span class="token operator">=</span> arr.find<span class="token punctuation">(</span>big<span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>  //2console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  // <span class="token punctuation">[</span>1,2,3,2,5<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="indexOf方法和lastIndexOf方法"><a href="#indexOf方法和lastIndexOf方法" class="headerlink" title="indexOf方法和lastIndexOf方法"></a>indexOf方法和lastIndexOf方法</h3><blockquote><p><strong>indexOf是从数组下标为0的地方开始往后查找，lastIndexOf是从数组最后一项往前查找，如果没查找到就返回-1，不会改变数组，返回指定数值的数组下标。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">var arr <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2, 3, 2, 5<span class="token punctuation">]</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>arr.indexOf<span class="token punctuation">(</span>2<span class="token punctuation">))</span><span class="token punctuation">;</span>  // 1 返回值为2的数组的下标console.log<span class="token punctuation">(</span>arr.indexOf<span class="token punctuation">(</span>2,2<span class="token punctuation">))</span><span class="token punctuation">;</span>  // 3 第一个参数表示要查找的数，第二个参数表示查找起点位置的索引console.log<span class="token punctuation">(</span>arr.indexOf<span class="token punctuation">(</span>6<span class="token punctuation">))</span><span class="token punctuation">;</span>  // -1console.log<span class="token punctuation">(</span>arr.lastIndexOf<span class="token punctuation">(</span>2<span class="token punctuation">))</span><span class="token punctuation">;</span>  // 3 从数组的末尾开始向前查找，返回正序下标console.log<span class="token punctuation">(</span>arr.lastIndexOf<span class="token punctuation">(</span>2,2<span class="token punctuation">))</span><span class="token punctuation">;</span>  // 1 从数组的末尾开始向前查找，返回正序下标<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach 方法"></a>forEach 方法</h3><blockquote><p><strong>数组的forEach方法,回调函数的函数体没有返回值，也就是没有return. foreach的回调会让数组的每个元素都执行回调函数里函数体的东西。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">var arr<span class="token operator">=</span><span class="token punctuation">[</span>1,2,3<span class="token punctuation">]</span><span class="token punctuation">;</span>arr.forEach<span class="token punctuation">(</span>function<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>   consolo.log<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>   consolo.log<span class="token punctuation">(</span><span class="token string">"————"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>结果如下:1__________2__________3__________<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="some-方法"><a href="#some-方法" class="headerlink" title="some 方法"></a>some 方法</h3><blockquote><p><strong>数组的some方法:数组的每个元素都会依次执行函数体里的东西，只要有一个满足条件表达式就会返回true，没有满足条件的就返回false。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">var ages <span class="token operator">=</span> <span class="token punctuation">[</span>3，10，18，20<span class="token punctuation">]</span>；var ceshi <span class="token operator">=</span> ages.some<span class="token punctuation">(</span>function<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> age<span class="token operator">></span>15<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>ceshi<span class="token punctuation">)</span><span class="token punctuation">;</span>  // <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="every-方法"><a href="#every-方法" class="headerlink" title="every 方法"></a>every 方法</h3><blockquote><p><strong>数组的every方法:数组的每个元素都会依次执行函数体里的东西，所有元素全部满足条件表达式就会返回true，只要有一个不满足条件的就返回false。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">var ages <span class="token operator">=</span> <span class="token punctuation">[</span>3，10，18，20<span class="token punctuation">]</span>；var ceshi <span class="token operator">=</span> ages.every<span class="token punctuation">(</span>function<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> age<span class="token operator">></span>15<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>ceshi<span class="token punctuation">)</span><span class="token punctuation">;</span>   // <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="filter-方法"><a href="#filter-方法" class="headerlink" title="filter 方法"></a>filter 方法</h3><blockquote><p><strong>数组的filter方法:返回符合函数体里条件的新数组，它不会改变原数组。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">var arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>id:1, flag:true<span class="token punctuation">}</span>,<span class="token punctuation">{</span>id:2,flag:false<span class="token punctuation">}</span>,<span class="token punctuation">{</span>id:3, flag:true<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>var newArr <span class="token operator">=</span> arr.filter<span class="token punctuation">(</span>obj <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>obj.flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  // 筛选出所有的flag为false的对象console.log<span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>   // <span class="token punctuation">[</span><span class="token punctuation">{</span>id:2,flag:false<span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="map-方法"><a href="#map-方法" class="headerlink" title="map 方法"></a>map 方法</h3><blockquote><p><strong>数组的map方法:返回一个新数组，新数组中的元素为原始数组中的每个元素调用函数处理后得到的值。看下例，找出下例里，数组对象里含有flag属性且flag值为true的对象。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">var arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>id:1, flag:true<span class="token punctuation">}</span>,<span class="token punctuation">{</span>id:2,flag:false<span class="token punctuation">}</span>,<span class="token punctuation">{</span>id:3<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>var newArr <span class="token operator">=</span> arr.map<span class="token punctuation">(</span>ob <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> “flag” <span class="token keyword">in</span> ob <span class="token operator">&amp;&amp;</span> ob.flag<span class="token operator">==</span>true<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>   // <span class="token punctuation">[</span><span class="token punctuation">{</span>id:1,flag:true<span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="includes-方法"><a href="#includes-方法" class="headerlink" title="includes 方法"></a>includes 方法</h3><blockquote><p><strong>includes方法用来判断一个数组是否包含一个指定的值，返回 true或 false。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">var arr <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2, 3, 2, 5<span class="token punctuation">]</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>arr.includes<span class="token punctuation">(</span>2<span class="token punctuation">))</span><span class="token punctuation">;</span>   // <span class="token boolean">true</span>console.log<span class="token punctuation">(</span>arr.includes<span class="token punctuation">(</span>6<span class="token punctuation">))</span><span class="token punctuation">;</span>   // <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString 方法"></a>toString 方法</h3><blockquote><p><strong>toString方法不会改变原数组，返回一个字符串，表示指定的数组及其元素。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">var arr <span class="token operator">=</span> <span class="token punctuation">[</span>1,2,3<span class="token punctuation">]</span><span class="token punctuation">;</span>arr.toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>arr.toString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>   // <span class="token string">'1,2,3'</span>console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   // <span class="token punctuation">[</span>1, 2, 3<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="reduce-方法"><a href="#reduce-方法" class="headerlink" title="reduce 方法"></a>reduce 方法</h3><blockquote><p><strong>reduce方法不会改变原数组，迭代数组的所有项，然后构建一个最终返回的值，从数组的第一项开始，逐个遍历到最后。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">var arr <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2, 3, 2, 5<span class="token punctuation">]</span><span class="token punctuation">;</span>// reduce方法有两个参数：在每一项上调用的函数和（可选的）作为归并基础的初始值// reduce方法的函数接收 4 个参数：前一个值、当前值、项的索引和数组对象// 这个函数返回的任何值都会作为第一个参数自动传给下一项// 第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数是数组的第二项var <span class="token function">sum</span> <span class="token operator">=</span> arr.reduce<span class="token punctuation">(</span>function<span class="token punctuation">(</span>pre, cur, index, array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> pre + cur<span class="token punctuation">;</span><span class="token punctuation">}</span>, 10<span class="token punctuation">)</span>console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   // <span class="token punctuation">[</span>1, 2, 3, 2, 5<span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>   // 23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="reduceRight-方法"><a href="#reduceRight-方法" class="headerlink" title="reduceRight 方法"></a>reduceRight 方法</h3><blockquote><p><strong>reduceRight方法不会改变原数组，迭代数组的所有项，从数组的最后一项开始，向前遍历到第一项。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">var arr <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2, 3, 2, 5<span class="token punctuation">]</span><span class="token punctuation">;</span>var <span class="token function">sum</span> <span class="token operator">=</span> arr.reduceRight<span class="token punctuation">(</span>function<span class="token punctuation">(</span>pre, cur, index, array<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> pre + cur<span class="token punctuation">;</span><span class="token punctuation">}</span>, 10<span class="token punctuation">)</span>console.log<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>   // <span class="token punctuation">[</span>1, 2, 3, 2, 5<span class="token punctuation">]</span>console.log<span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>   // 23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="flat-方法"><a href="#flat-方法" class="headerlink" title="flat 方法"></a>flat 方法</h3><blockquote><p><strong>数组的flat方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。语法如下：var newArray = arr.flat( [ depth ] ); depth指定要提取嵌套数组的结构深度，默认值为 1。返回值是一个包含将数组与子数组中所有元素的新数组。扁平化数组就是将多维数组转变为一维数组的过程。</strong></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">var arr1 <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2, <span class="token punctuation">[</span>3, 4<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span> arr1.flat<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>   // <span class="token punctuation">[</span>1, 2, 3, 4<span class="token punctuation">]</span>var arr2 <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2, <span class="token punctuation">[</span>3, 4, <span class="token punctuation">[</span>5, 6<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span> arr2.flat<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>   // <span class="token punctuation">[</span>1, 2, 3, 4, <span class="token punctuation">[</span>5, 6<span class="token punctuation">]</span><span class="token punctuation">]</span>var arr3 <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2, <span class="token punctuation">[</span>3, 4, <span class="token punctuation">[</span>5, 6<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span> arr3.flat<span class="token punctuation">(</span>2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    // <span class="token punctuation">[</span>1, 2, 3, 4, 5, 6<span class="token punctuation">]</span>//使用 Infinity，可展开任意深度的嵌套数组var arr4 <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2, <span class="token punctuation">[</span>3, 4, <span class="token punctuation">[</span>5, 6, <span class="token punctuation">[</span>7, 8, <span class="token punctuation">[</span>9, 10<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span> arr4.flat<span class="token punctuation">(</span>Infinity<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   // <span class="token punctuation">[</span>1, 2, 3, 4, 5, 6, 7, 8, 9, 10<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客开源</title>
      <link href="/2019/08/27/blog-open-source/"/>
      <url>/2019/08/27/blog-open-source/</url>
      
        <content type="html"><![CDATA[<h1 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h1><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/Blog-Open-Source/blog-demo1.gif" alt="演示Demo"></p><h1 id="简短介绍"><a href="#简短介绍" class="headerlink" title="简短介绍"></a>简短介绍</h1><p>倒腾了一两周总算把个人博客网站完善了，目前这个版本使用应该是够了，当然还有一些优化项和功能增加后续在慢慢更新，为了回馈开源，今天准备把我自己修改完善的<code>blog</code>网站源代码开源。这不是生成后的网页文件，是您可以直接使用的源码，您只需要把博客相关信息换成您自己的就可以部署了，对于新手或者不懂编程的小伙伴来说，简直是福音，极大简化了您构建博客的工作量和复杂度，每个人都可以下载并修改成自己喜欢样式！如果你有修改想法，欢迎PR！最后，我们还是给这个开源小项目取个名字吧，就叫<a href="https://github.com/shw2018/hexo-blog-fly.git" target="_blank" rel="noopener">hexo-blog-fly</a>吧，怎么样？&lt;&lt;&lt;&lt;&lt;<a href="https://github.com/shw2018/hexo-blog-fly" target="_blank" rel="noopener">源代码下载</a>&gt;&gt;&gt;&gt;&gt;</p><p>本博客基于<code>Hexo</code>框架搭建，用到<a href="https://github.com/shw2018/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a>主题, 并在此基础之上做了很多修改，修复了一些bug，增加了一些新的特性和功能，博客地址：<a href="https://shw2018.github.io/" target="_blank" rel="noopener">https://shw2018.github.io</a>，博客演示：<a href="https://sunhwee.com">sunhwee.com</a>。</p><hr><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p><strong>原主题特性</strong>:</p><ul><li><p>简单漂亮，文章内容美观易读</p></li><li><p><a href="https://material.io/" target="_blank" rel="noopener">Material Design</a> 设计</p></li><li><p>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</p></li><li><p>首页轮播文章及每天动态切换 <code>Banner</code> 图片</p></li><li><p>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</p></li><li><p>时间轴式的归档页</p></li><li><p><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</p></li><li><p>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</p></li><li><p>可自定义的数据的友情链接页面</p></li><li><p>支持文章置顶和文章打赏</p></li><li><p>支持 <code>MathJax</code></p></li><li><p><code>TOC</code> 目录</p></li><li><p>可设置复制文章内容时追加版权信息</p></li><li><p>可设置阅读文章时做密码验证</p></li><li><p><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment</a>、<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a> 和 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</p></li><li><p>集成了<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</p></li><li><p>支持在首页的音乐播放和视频播放功能</p><p><strong>增加的工作或特性(未打钩的是已做但还没更新到源码的)</strong>:</p></li><li><p>修改了原主题的一些很多<code>bug</code>   2019.08.05</p></li><li><p>加入图片懒加载功能，在根目录配置文件开启和关闭    2019.08.09</p></li><li><p>增加<code>留言板</code>功能          2019.08.05</p></li><li><p>在关于板块,加入<code>简历</code>功能页   2019.08.05</p></li><li><p>增加视听[视觉听觉影音]板块       2019.08.10</p></li><li><p>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。  2019.08.10</p></li><li><p>增加网站运行时间显示  2019.08.10</p></li><li><p>增加<code>动漫模型</code>     2019.08.10</p></li><li><p>整体替换Banner图片和文章特色图片   2019.08.10</p></li><li><p>增加分类<code>相册</code>功能         2019.08.29</p></li><li><p>去掉标签页,将其合并至<code>分类</code>页中                2019.09.01</p></li><li><p>修改了一些控件的参数   2019.09.01</p></li><li><p>修改部分样式,比如: 文章卡片,固定高度,使其不至于因为文章摘要的长短不同导致卡片大小不一使页面布局很不美观,类似的还有友链卡片,优化了页面内容布局,视觉更整齐美观          2019.09.01</p></li><li><p>解决首页文章列表卡片上方 <code>border-radius</code>圆角失效的bug  2019.09.01</p></li><li><p>添加页面樱花飘落动效            2019.09.09</p></li><li><p>添加鼠标点击烟花爆炸动效   2019.09.09</p></li><li><p>加入天气接口控件   2019.09.09</p></li><li><p>加入鼠标点击文字特效   2019.09.10</p></li><li><p>添加页面雪花飘落动效            2019.09.10</p></li><li><p>添加在线聊天插件            2019.09.12</p></li><li><p>持续更新…</p></li></ul><hr><p><strong>简单使用方法：</strong></p><ol><li><code>star</code> 本项目</li><li>安装<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>, 安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodeJS</a></li><li>你可以直接<code>fork</code>一份源码到你的仓库，<code>clone</code>到本地</li><li>在本地博客仓库运行<code>npm i</code>命令安装依赖包</li><li>修改配置信息，改成自己的信息</li><li>运行命令<code>hexo  clean</code>（清除生成文件），<code>hexo g</code>（生成网页）， <code>hexo  s</code>（本地预览），<code>hexo d</code>（部署）</li></ol><blockquote><p><strong>更多详情教程，强烈推荐看我写的：<a href="https://sunhwee.com/posts/6e8839eb.html">Hexo+Github博客搭建完全教程</a></strong></p></blockquote><blockquote><p><strong>最后，如果项目和教程对你有所帮助或者你看见了还算比较喜欢，欢迎给我<code>star</code>，谢谢您！</strong></p></blockquote><p><strong>持续更新中…，如果遇到问题欢迎联系我，在文章最后评论区【留言和讨论】，当然，欢迎点击文章最后的打赏按键，请博主一杯冰阔乐，笑～</strong></p><table>  <tbody><tr>    <td><img width="100" src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://sunhwee.com/medias/reward/alipay.bmp"></td>    <td><img width="100" src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://sunhwee.com/medias/reward/wechat.bmp"></td>    <td><img width="100" src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://sunhwee.com/medias/reward/zan.png"></td>     </tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件安装与配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
